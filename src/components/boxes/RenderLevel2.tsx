import React from "react";
import {View} from "react-native";
import {range} from "lodash";
import {PlayGeneratesProps} from "../game/PlayScreen";
import {BoxSwapLevelHandler} from "../animated/LevelDrag";
import {CircleRow} from "./CircleRow";
import {CBox} from "./Box";
import {CSlotBall} from "./Ball";
import {useLayout} from "./LayoutRedux";
import {useBoxSwapLevelSelector} from "../../state";
import {getBoxIndexes, getSlotIndexes} from "../../state/slotSwap/selectors";
import {SwapController} from "../level-touch/SwapController";

/**
 * gets everything from redux and requires no props other than those generated by Play
 */
export const RenderLevel = ({state, id, loadInTiming, winEffectTiming}: PlayGeneratesProps) => {

    /**
     * need to avoid loading a ball before the data is in redux
     * can move this elsewhere
     */
    const boxIndexes = useBoxSwapLevelSelector(getBoxIndexes);
    const slotIndexes = useBoxSwapLevelSelector(getSlotIndexes);

    const {ballsPerRow, rowsPerBox, boxCount} = useLayout();

    /**
     * can avoid prop drilling by defining components as containers independent of their contents and doing all of the looping at the highest level
     */
    return (
            <View
                style={{
                    flex: 1,
                    width: "100%",
                    display: "flex",
                    flexDirection: "column",
                    justifyContent: "space-evenly",
                    alignItems: "center",
                }}
            >
                {boxIndexes.map((boxIndex) => (
                    <CBox
                        winEffectTiming={winEffectTiming}
                        index={boxIndex}
                        key={boxIndex}
                    >
                        {range(0, rowsPerBox).map((rowIndex) => (
                            <CircleRow
                                key={rowIndex}
                            >
                                {range(0, ballsPerRow).map((columnIndex) => {
                                    const slot = columnIndex + rowIndex * ballsPerRow + boxIndex * ballsPerRow * rowsPerBox;
                                    if (slotIndexes.includes(slot)) {
                                        return (
                                            <CSlotBall
                                                key={slot}
                                                slot={slot}
                                                winEffectTiming={winEffectTiming}
                                                loadInTiming={loadInTiming}
                                                state={state}
                                            />
                                        )
                                    }
                                    else return null;
                                })}
                            </CircleRow>
                        ))}
                    </CBox>
                ))}
            </View>
    )
};

