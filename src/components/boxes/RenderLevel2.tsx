import React from "react";
import {View} from "react-native";
import {range} from "lodash";
import {PlayGeneratesProps} from "../game/PlayScreen";
import {CircleRow} from "./CircleRow";
import {CBox} from "./Box";
import {CSlotBall} from "./Ball";
import {useSelector} from "../../state";
import {selectBallCount, selectBoxDataMap, selectLayout} from "../../state/slotSwap/selectors";

/**
 * gets everything from redux and requires no props other than those generated by Play
 */
export const RenderLevel = ({state, id, loadInTiming, winEffectTiming}: PlayGeneratesProps) => {

    console.log("RenderLevel re-rendered");
    /**
     * need to avoid loading a ball before the data is in redux
     */
    const ballCount = useSelector(selectBallCount);

    const {ballsPerRow, rowsPerBox, boxCount} = useSelector(selectLayout);
    const boxes = useSelector(selectBoxDataMap);

    /**
     * can avoid prop drilling by defining components as containers independent of their contents and doing all of the looping at the highest level
     */
    return (
        <View
            style={{
                flex: 1,
                width: "100%",
                display: "flex",
                flexDirection: "column",
                justifyContent: "space-evenly",
                alignItems: "center",
            }}
        >
            {boxes.map((_, boxIndex) => (
                <CBox
                    winEffectTiming={winEffectTiming}
                    index={boxIndex}
                    key={boxIndex}
                >
                    {range(0, rowsPerBox).map((rowIndex) => (
                        <CircleRow
                            key={rowIndex}
                        >
                            {range(0, ballsPerRow).map((columnIndex) => {
                                const slot = columnIndex + rowIndex * ballsPerRow + boxIndex * ballsPerRow * rowsPerBox;
                                return (
                                    <CSlotBall
                                        key={slot}
                                        slot={slot}
                                        winEffectTiming={winEffectTiming}
                                        loadInTiming={loadInTiming}
                                        state={state}
                                    />
                                )
                            })}
                        </CircleRow>
                    ))}
                </CBox>
            ))}
        </View>
    )
};

